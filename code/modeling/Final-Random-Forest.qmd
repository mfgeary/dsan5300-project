---
title: "Final-Random Forest Code"
format: 
    html:
        embed-resources: true 
---

```{python}
import pandas as pd
import numpy as np
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
```

```{python}
trips = pd.read_csv(r"C:\Users\varun\Documents\DSAN @ GU\5300-project-group-6\data\clean\trip.csv")
trips.info()
```

```{python}
trips['trip_purpose'].value_counts()
```

```{python}
X = trips.drop(['trip_purpose','household_id','person_id','trip_id','sequential_trip_id','household_stratum_id','vehicle_case_id','vehicle_id','why_trip','reason_for_travel_to','trip_purpose_old_schema','travel_day_date'], axis=1)
y = trips['trip_purpose']
```

```{python}
object_cols = X.select_dtypes(include=['object']).columns
OHC = pd.get_dummies(X, columns=object_cols)
```

# Split the data into training and testing sets
```{python}
X_train, X_test, y_train, y_test = train_test_split(OHC, y, test_size=0.2, random_state=42)
```

# Hyperparam tuning 
```{python}
param_grid = {
    'n_estimators': [50, 100],
    'max_depth': list(range(1,4)),
    'min_samples_split': list(range(2,6))
}
rf = RandomForestClassifier()
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)
best_params = grid_search.best_params_
```

```{python}
print(f"Best params: {best_params}")
```

## Define the Random Forest classifier
```{python}
rf = RandomForestClassifier(max_depth=15,min_samples_split=3,n_estimators=100)
rf.fit(X_train, y_train)
pred = rf.predict(X_test)
```

## Evaluate the model
```{python}
train_accuracy = rf.score(X_train, y_train)
test_accuracy = rf.score(X_test, y_test)
print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)
```

## Testing Accuracy plot 

```{python}
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.metrics import roc_curve, auc
from sklearn.ensemble import RandomForestClassifier

# Assuming you have your data stored in X and y variables
# Replace X and y with your actual data

# Binarize the output
y_bin = label_binarize(y, classes=['Home-based social/recreational (HBSOC)',
                                   'Home-based shopping (HBSHP)',
                                   'Not a home-based trip (NHB)',
                                   'Home-based other (HBO)',
                                   'Home-based work (HBW)',
                                   'Not ascertained'])
n_classes = y_bin.shape[1]

X_train, X_test, y_train, y_test = train_test_split(X, y_bin, test_size=.5, random_state=0)

classifier = RandomForestClassifier(max_depth=15, min_samples_split=3, n_estimators=100, random_state=0)
y_score = classifier.fit(X_train, y_train).predict_proba(X_test)

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(n_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Plot ROC curve for each class
plt.figure(figsize=(8, 6))
lw = 2
for i in range(n_classes):
    plt.plot(fpr[i], tpr[i], lw=lw,
             label='ROC curve of class {0} (area = {1:0.2f})'
             ''.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], color='k', linestyle='--', lw=lw)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic for Multi-class Data')
plt.legend(loc="lower right")
plt.show()

```

```{python}
trips['trip_purpose'].unique()
```

```{python}
plot_roc_curve(y_test,pred)
```

```{python}
max_depth_list = []
test_accuracy_list = []

for max_depth in range(1, 15):
    rf = RandomForestClassifier(max_depth=max_depth, min_samples_split=3, n_estimators=100)
    rf.fit(X_train, y_train)
    test_accuracy = rf.score(X_test, y_test)
    max_depth_list.append(max_depth)
    test_accuracy_list.append(test_accuracy)

plt.figure(figsize=(10, 6))
plt.plot(max_depth_list, test_accuracy_list, marker='o')
plt.title('Testing Accuracy for different Depths')
plt.xlabel('Max Depth')
plt.ylabel('Testing Accuracy')
plt.xticks(max_depth_list)
plt.grid(True)
plt.show()
```